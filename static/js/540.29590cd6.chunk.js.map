{"version":3,"file":"static/js/540.29590cd6.chunk.js","mappings":"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","sources":["pages/components/Alerts.js","../node_modules/@themesberg/react-bootstrap/lib/esm/Alert.js","../node_modules/@themesberg/react-bootstrap/lib/esm/CloseButton.js"],"sourcesContent":["\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBullhorn } from '@fortawesome/free-solid-svg-icons';\nimport { Col, Row, Alert, Button, Container } from '@themesberg/react-bootstrap';\n\nimport Documentation from \"../../components/Documentation\";\n\nexport default () => {\n  return (\n    <article>\n      <Container className=\"px-0\">\n        <Row className=\"d-flex flex-wrap flex-md-nowrap align-items-center py-4\">\n          <Col className=\"d-block mb-4 mb-md-0\">\n            <h1 className=\"h2\">Alerts</h1>\n            <p className=\"mb-0\">\n              Use alerts to provide contextual feedback to your users based on their input and behaviour.\n        </p>\n          </Col>\n        </Row>\n\n        <Documentation\n          title=\"Example\"\n          description={\n            <p>The <code>&#x3C;Alert&#x3E;</code> component can be used to show your users error, success, informational or warning messages. Use component properties such as  <code>variant=\"primary</code> or <code>variant=\"secondary\"</code> to use the colors from the Sass variables:</p>\n          }\n          scope={{ Alert }}\n          imports={`import { Alert } from '@themesberg/react-bootstrap';`}\n          example={`<React.Fragment>\n  <Alert variant=\"primary\">\n    A simple primary alert — check it out!\n  </Alert>\n  <Alert variant=\"secondary\">\n    A simple secondary alert — check it out!\n  </Alert>\n  <Alert variant=\"success\">\n    A simple success alert — check it out!\n  </Alert>\n  <Alert variant=\"danger\">\n    A simple danger alert — check it out!\n  </Alert>\n  <Alert variant=\"warning\">\n    A simple warning alert — check it out!\n  </Alert>\n  <Alert variant=\"info\">\n    A simple info alert — check it out!\n  </Alert>\n  <Alert variant=\"light\">\n    A simple light alert — check it out!\n  </Alert>\n  <Alert variant=\"dark\">\n    A simple dark alert — check it out!\n  </Alert>\n</React.Fragment>`}\n        />\n\n        <Documentation\n          title=\"Dismissable alerts\"\n          description={\n            <p>The <code>&#x3C;Alert&#x3E;</code> component can be used to create an alert component that can be closed by clicking on the close icon by adding the <code>show</code> and <code>onClose</code> properties. Additionally, you can also use the <code>&#x3C;FontAwesomeIcon&#x3E;</code> component to add an icon inside the alert component.</p>\n          }\n          scope={{ Alert, Button, FontAwesomeIcon, faBullhorn }}\n          imports={`import { Alert, Button } from '@themesberg/react-bootstrap';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBullhorn } from \"@fortawesome/free-solid-svg-icons\";`}\n          example={`function DismissableAlerts() {\n  const [hiddenAlerts, setHiddenAlerts] = React.useState([]);\n\n  const onClose = (alertId) => {\n    const hiddenAlertsUpdated = [...hiddenAlerts, alertId];\n    setHiddenAlerts(hiddenAlertsUpdated);\n  };\n\n  const shouldShowAlert = (alertId) => (\n    hiddenAlerts.indexOf(alertId) === -1\n  );\n\n  return(\n    <React.Fragment>\n      <Alert\n        variant=\"primary\"\n        show={shouldShowAlert(\"primary\")}\n        onClose={() => onClose(\"primary\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"primary\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"secondary\"\n        show={shouldShowAlert(\"secondary\")}\n        onClose={() => onClose(\"secondary\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"secondary\")} />\n        </div>\n      </Alert>\n      \n      <Alert\n        variant=\"danger\"\n        show={shouldShowAlert(\"danger\")}\n        onClose={() => onClose(\"danger\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"danger\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"success\"\n        show={shouldShowAlert(\"success\")}\n        onClose={() => onClose(\"success\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"success\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"warning\"\n        show={shouldShowAlert(\"warning\")}\n        onClose={() => onClose(\"warning\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"warning\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"light\"\n        show={shouldShowAlert(\"light\")}\n        onClose={() => onClose(\"light\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"light\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"dark\"\n        show={shouldShowAlert(\"dark\")}\n        onClose={() => onClose(\"dark\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"dark\")} />\n        </div>\n      </Alert>\n    </React.Fragment>\n  );\n}\n\nrender( <DismissableAlerts /> );`}\n        />\n      </Container>\n    </article>\n  );\n};\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Fade from './Fade';\nimport CloseButton from './CloseButton';\nimport divWithClassName from './divWithClassName';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport SafeAnchor from './SafeAnchor';\nvar DivStyledAsH4 = divWithClassName('h4');\nDivStyledAsH4.displayName = 'DivStyledAsH4';\nvar AlertHeading = createWithBsPrefix('alert-heading', {\n  Component: DivStyledAsH4\n});\nvar AlertLink = createWithBsPrefix('alert-link', {\n  Component: SafeAnchor\n});\nvar defaultProps = {\n  show: true,\n  transition: Fade,\n  closeLabel: 'Close alert'\n};\nvar Alert = /*#__PURE__*/React.forwardRef(function (uncontrolledProps, ref) {\n  var _useUncontrolled = useUncontrolled(uncontrolledProps, {\n    show: 'onClose'\n  }),\n      bsPrefix = _useUncontrolled.bsPrefix,\n      show = _useUncontrolled.show,\n      closeLabel = _useUncontrolled.closeLabel,\n      closeVariant = _useUncontrolled.closeVariant,\n      className = _useUncontrolled.className,\n      children = _useUncontrolled.children,\n      variant = _useUncontrolled.variant,\n      onClose = _useUncontrolled.onClose,\n      dismissible = _useUncontrolled.dismissible,\n      transition = _useUncontrolled.transition,\n      props = _objectWithoutPropertiesLoose(_useUncontrolled, [\"bsPrefix\", \"show\", \"closeLabel\", \"closeVariant\", \"className\", \"children\", \"variant\", \"onClose\", \"dismissible\", \"transition\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'alert');\n  var handleClose = useEventCallback(function (e) {\n    if (onClose) {\n      onClose(false, e);\n    }\n  });\n  var Transition = transition === true ? Fade : transition;\n  var alert = /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"alert\"\n  }, !Transition ? props : undefined, {\n    ref: ref,\n    className: classNames(className, prefix, variant && prefix + \"-\" + variant, dismissible && prefix + \"-dismissible\")\n  }), dismissible && /*#__PURE__*/React.createElement(CloseButton, {\n    onClick: handleClose,\n    \"aria-label\": closeLabel,\n    variant: closeVariant\n  }), children);\n  if (!Transition) return show ? alert : null;\n  return /*#__PURE__*/React.createElement(Transition, _extends({\n    unmountOnExit: true\n  }, props, {\n    ref: undefined,\n    in: show\n  }), alert);\n});\nAlert.displayName = 'Alert';\nAlert.defaultProps = defaultProps;\nAlert.Link = AlertLink;\nAlert.Heading = AlertHeading;\nexport default Alert;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nvar propTypes = {\n  'aria-label': PropTypes.string,\n  onClick: PropTypes.func,\n\n  /**\n   * Render different color variant for the button.\n   *\n   * Omitting this will render the default dark color.\n   */\n  variant: PropTypes.oneOf(['white'])\n};\nvar defaultProps = {\n  'aria-label': 'Close'\n};\nvar CloseButton = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var className = _ref.className,\n      variant = _ref.variant,\n      props = _objectWithoutPropertiesLoose(_ref, [\"className\", \"variant\"]);\n\n  return /*#__PURE__*/React.createElement(\"button\", _extends({\n    ref: ref,\n    type: \"button\",\n    className: classNames('btn-close', variant && \"btn-close-\" + variant, className)\n  }, props));\n});\nCloseButton.displayName = 'CloseButton';\nCloseButton.propTypes = propTypes;\nCloseButton.defaultProps = defaultProps;\nexport default CloseButton;"],"names":["className","title","description","scope","Alert","imports","example","Button","FontAwesomeIcon","faBullhorn","DivStyledAsH4","divWithClassName","displayName","AlertHeading","createWithBsPrefix","Component","AlertLink","SafeAnchor","defaultProps","show","transition","Fade","closeLabel","React","uncontrolledProps","ref","_useUncontrolled","useUncontrolled","bsPrefix","closeVariant","children","variant","onClose","dismissible","props","_objectWithoutPropertiesLoose","prefix","useBootstrapPrefix","handleClose","useEventCallback","e","Transition","alert","_extends","role","undefined","classNames","CloseButton","onClick","unmountOnExit","in","Link","Heading","propTypes","PropTypes","_ref","type"],"sourceRoot":""}
"use strict";(self.webpackChunkblog_project=self.webpackChunkblog_project||[]).push([[540],{9540:function(e,n,o){o.r(n);o(72791);var s=o(54483),t=o(53174),l=o(58875),a=o(87546),r=o(506),i=o(25135),c=o(80505),d=o(28496),m=o(80184);n.default=function(){return(0,m.jsx)("article",{children:(0,m.jsxs)(l.Z,{className:"px-0",children:[(0,m.jsx)(a.Z,{className:"d-flex flex-wrap flex-md-nowrap align-items-center py-4",children:(0,m.jsxs)(r.Z,{className:"d-block mb-4 mb-md-0",children:[(0,m.jsx)("h1",{className:"h2",children:"Alerts"}),(0,m.jsx)("p",{className:"mb-0",children:"Use alerts to provide contextual feedback to your users based on their input and behaviour."})]})}),(0,m.jsx)(d.Z,{title:"Example",description:(0,m.jsxs)("p",{children:["The ",(0,m.jsx)("code",{children:"<Alert>"})," component can be used to show your users error, success, informational or warning messages. Use component properties such as  ",(0,m.jsx)("code",{children:'variant="primary'})," or ",(0,m.jsx)("code",{children:'variant="secondary"'})," to use the colors from the Sass variables:"]}),scope:{Alert:i.Z},imports:"import { Alert } from '@themesberg/react-bootstrap';",example:'<React.Fragment>\n  <Alert variant="primary">\n    A simple primary alert \u2014 check it out!\n  </Alert>\n  <Alert variant="secondary">\n    A simple secondary alert \u2014 check it out!\n  </Alert>\n  <Alert variant="success">\n    A simple success alert \u2014 check it out!\n  </Alert>\n  <Alert variant="danger">\n    A simple danger alert \u2014 check it out!\n  </Alert>\n  <Alert variant="warning">\n    A simple warning alert \u2014 check it out!\n  </Alert>\n  <Alert variant="info">\n    A simple info alert \u2014 check it out!\n  </Alert>\n  <Alert variant="light">\n    A simple light alert \u2014 check it out!\n  </Alert>\n  <Alert variant="dark">\n    A simple dark alert \u2014 check it out!\n  </Alert>\n</React.Fragment>'}),(0,m.jsx)(d.Z,{title:"Dismissable alerts",description:(0,m.jsxs)("p",{children:["The ",(0,m.jsx)("code",{children:"<Alert>"})," component can be used to create an alert component that can be closed by clicking on the close icon by adding the ",(0,m.jsx)("code",{children:"show"})," and ",(0,m.jsx)("code",{children:"onClose"})," properties. Additionally, you can also use the ",(0,m.jsx)("code",{children:"<FontAwesomeIcon>"})," component to add an icon inside the alert component."]}),scope:{Alert:i.Z,Button:c.Z,FontAwesomeIcon:s.G,faBullhorn:t.Acd},imports:'import { Alert, Button } from \'@themesberg/react-bootstrap\';\nimport { FontAwesomeIcon } from "@fortawesome/react-fontawesome";\nimport { faBullhorn } from "@fortawesome/free-solid-svg-icons";',example:'function DismissableAlerts() {\n  const [hiddenAlerts, setHiddenAlerts] = React.useState([]);\n\n  const onClose = (alertId) => {\n    const hiddenAlertsUpdated = [...hiddenAlerts, alertId];\n    setHiddenAlerts(hiddenAlertsUpdated);\n  };\n\n  const shouldShowAlert = (alertId) => (\n    hiddenAlerts.indexOf(alertId) === -1\n  );\n\n  return(\n    <React.Fragment>\n      <Alert\n        variant="primary"\n        show={shouldShowAlert("primary")}\n        onClose={() => onClose("primary")}>\n\n        <div className="d-flex justify-content-between">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className="me-1" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant="close" size="xs" onClick={() => onClose("primary")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant="secondary"\n        show={shouldShowAlert("secondary")}\n        onClose={() => onClose("secondary")}>\n\n        <div className="d-flex justify-content-between">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className="me-1" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant="close" size="xs" onClick={() => onClose("secondary")} />\n        </div>\n      </Alert>\n      \n      <Alert\n        variant="danger"\n        show={shouldShowAlert("danger")}\n        onClose={() => onClose("danger")}>\n\n        <div className="d-flex justify-content-between">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className="me-1" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant="close" size="xs" onClick={() => onClose("danger")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant="success"\n        show={shouldShowAlert("success")}\n        onClose={() => onClose("success")}>\n\n        <div className="d-flex justify-content-between">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className="me-1" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant="close" size="xs" onClick={() => onClose("success")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant="warning"\n        show={shouldShowAlert("warning")}\n        onClose={() => onClose("warning")}>\n\n        <div className="d-flex justify-content-between">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className="me-1" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant="close" size="xs" onClick={() => onClose("warning")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant="light"\n        show={shouldShowAlert("light")}\n        onClose={() => onClose("light")}>\n\n        <div className="d-flex justify-content-between">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className="me-1" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant="close" size="xs" onClick={() => onClose("light")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant="dark"\n        show={shouldShowAlert("dark")}\n        onClose={() => onClose("dark")}>\n\n        <div className="d-flex justify-content-between">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className="me-1" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant="close" size="xs" onClick={() => onClose("dark")} />\n        </div>\n      </Alert>\n    </React.Fragment>\n  );\n}\n\nrender( <DismissableAlerts /> );'})]})})}},25135:function(e,n,o){var s=o(87462),t=o(63366),l=o(81694),a=o.n(l),r=o(72791),i=o(80239),c=o(52134),d=o(89496),m=o(25894),h=o(18212),u=o(22625),f=o(61669),A=o(31650),v=(0,u.Z)("h4");v.displayName="DivStyledAsH4";var p=(0,f.Z)("alert-heading",{Component:v}),w=(0,f.Z)("alert-link",{Component:A.Z}),g={show:!0,transition:m.Z,closeLabel:"Close alert"},b=r.forwardRef((function(e,n){var o=(0,i.Ch)(e,{show:"onClose"}),l=o.bsPrefix,u=o.show,f=o.closeLabel,A=o.closeVariant,v=o.className,p=o.children,w=o.variant,g=o.onClose,b=o.dismissible,x=o.transition,C=(0,t.Z)(o,["bsPrefix","show","closeLabel","closeVariant","className","children","variant","onClose","dismissible","transition"]),y=(0,d.vE)(l,"alert"),k=(0,c.Z)((function(e){g&&g(!1,e)})),N=!0===x?m.Z:x,j=r.createElement("div",(0,s.Z)({role:"alert"},N?void 0:C,{ref:n,className:a()(v,y,w&&y+"-"+w,b&&y+"-dismissible")}),b&&r.createElement(h.Z,{onClick:k,"aria-label":f,variant:A}),p);return N?r.createElement(N,(0,s.Z)({unmountOnExit:!0},C,{ref:void 0,in:u}),j):u?j:null}));b.displayName="Alert",b.defaultProps=g,b.Link=w,b.Heading=p,n.Z=b},18212:function(e,n,o){var s=o(87462),t=o(63366),l=o(52007),a=o.n(l),r=o(72791),i=o(81694),c=o.n(i),d={"aria-label":a().string,onClick:a().func,variant:a().oneOf(["white"])},m=r.forwardRef((function(e,n){var o=e.className,l=e.variant,a=(0,t.Z)(e,["className","variant"]);return r.createElement("button",(0,s.Z)({ref:n,type:"button",className:c()("btn-close",l&&"btn-close-"+l,o)},a))}));m.displayName="CloseButton",m.propTypes=d,m.defaultProps={"aria-label":"Close"},n.Z=m}}]);
//# sourceMappingURL=540.29590cd6.chunk.js.map
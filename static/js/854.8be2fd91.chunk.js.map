{"version":3,"file":"static/js/854.8be2fd91.chunk.js","mappings":"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","sources":["components/Progress.js","pages/components/Progress.js","../node_modules/@themesberg/react-bootstrap/lib/esm/ProgressBar.js","../node_modules/@themesberg/react-bootstrap/lib/esm/ElementChildren.js"],"sourcesContent":["import React from \"react\";\nimport { ProgressBar } from '@themesberg/react-bootstrap';\n\nexport default (props) => {\n  const { label, variant, value, type = \"label\", size = \"md\" } = props;\n  const finalValue = value ? value : Math.floor(Math.random() * (Math.floor(100) - 20 + 1)) + 20; // generates a random number between 20 and 100\n  const textColor = type === \"label\" ? variant : \"white\";\n  const bgColorClass = type === \"tooltip\" ? `bg-${variant}` : \"\";\n\n  return (\n    <div className=\"progress-wrapper\">\n      <div className=\"progress-info\">\n        <div className={`progress-${type} text-${textColor} ${bgColorClass}`}>\n          {label}\n        </div>\n        <div className=\"progress-percentage\">\n          <span>{finalValue}%</span>\n        </div>\n      </div>\n      <ProgressBar className={`progress-${size}`} variant={variant} now={finalValue} min={0} max={100} />\n    </div>\n  );\n};\n","\nimport React from 'react';\nimport { Col, Row, Container } from '@themesberg/react-bootstrap';\n\nimport Documentation from \"../../components/Documentation\";\nimport Progress from \"../../components/Progress\";\n\nexport default () => (\n  <article>\n    <Container className=\"px-0\">\n      <Row className=\"d-flex flex-wrap flex-md-nowrap align-items-center py-4\">\n        <Col className=\"d-block mb-4 mb-md-0\">\n          <h1 className=\"h2\">Progress</h1>\n          <p className=\"mb-0\">\n            Use progress bars to indicate percentage based components.\n          </p>\n        </Col>\n      </Row>\n\n      <Documentation\n        title=\"Example\"\n        description={\n          <p>Use the <code>&#x3C;Progress&#x3E;</code> component to show progress bars or loaders for your app. You can set the value of the bar using the <code>value</code> attribute. You can also change the appearance using the <code>variant=\"*\"</code> attributes using the default Bootstrap color classes, such as <code>primary</code>, <code>secondary</code>, <code>danger</code> and so on.</p>\n        }\n        scope={{ Progress }}\n        imports={`import Progress from \"src/components/Progress\";`}\n        example={`<Progress variant=\"primary\" label=\"Primary color\" value={25} />`}\n      />\n\n      <Documentation\n        title=\"Color variations\"\n        description={\n          <p>To update the appearance of the <code>&#x3C;Progress&#x3E;</code> component you can use the following classes for the <code>variant</code> attribute. You can also add a label text using the <code>label=\"lorem ipsum\"</code> attribute.</p>\n        }\n        scope={{ Progress }}\n        imports={`import Progress from \"src/components/Progress\";`}\n        example={`<React.Fragment>\n  <Progress variant=\"secondary\" label=\"Secondary color\" />\n  <Progress variant=\"tertiary\" label=\"Tertiary color\" />\n  <Progress variant=\"dark\" label=\"Dark color\" />\n  <Progress variant=\"success\" label=\"Success color\" />\n  <Progress variant=\"info\" label=\"Info color\" />\n  <Progress variant=\"danger\" label=\"Danger color\" />\n</React.Fragment>`}\n      />\n\n      <Documentation\n        title=\"Sizing\"\n        description={\n          <p>You can also use one of the four available sizes for the <code>&#x3C;Progress&#x3E;</code> updating the <code>size=\"*\"</code> attribute.</p>\n        }\n        scope={{ Progress }}\n        imports={`import Progress from \"src/components/Progress\";`}\n        example={`<React.Fragment>\n  <Progress variant=\"primary\" label=\"XL Progress Bar\" size=\"xl\" />\n  <Progress variant=\"secondary\" label=\"LG Progress Bar\" size=\"lg\" />\n  <Progress variant=\"tertiary\" label=\"MD Progress Bar\" size=\"md\" />\n  <Progress variant=\"info\" label=\"SM Progress Bar\" size=\"sm\" />\n</React.Fragment>`}\n      />\n    </Container>\n  </article>\n);\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nvar ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  var children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  var error = null;\n  React.Children.forEach(children, function (child) {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n\n\n    var element = /*#__PURE__*/React.createElement(ProgressBar, null);\n    if (child.type === element.type) return;\n    var childType = child.type;\n    var childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(\"Children of \" + componentName + \" can contain only ProgressBar \" + (\"components. Found \" + childIdentifier + \".\"));\n  });\n  return error;\n}\n\nvar defaultProps = {\n  min: 0,\n  max: 100,\n  animated: false,\n  isChild: false,\n  srOnly: false,\n  striped: false\n};\n\nfunction getPercentage(now, min, max) {\n  var percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nfunction renderProgressBar(_ref, ref) {\n  var _classNames;\n\n  var min = _ref.min,\n      now = _ref.now,\n      max = _ref.max,\n      label = _ref.label,\n      srOnly = _ref.srOnly,\n      striped = _ref.striped,\n      animated = _ref.animated,\n      className = _ref.className,\n      style = _ref.style,\n      variant = _ref.variant,\n      bsPrefix = _ref.bsPrefix,\n      props = _objectWithoutPropertiesLoose(_ref, [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"animated\", \"className\", \"style\", \"variant\", \"bsPrefix\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, props, {\n    role: \"progressbar\",\n    className: classNames(className, bsPrefix + \"-bar\", (_classNames = {}, _classNames[\"bg-\" + variant] = variant, _classNames[bsPrefix + \"-bar-animated\"] = animated, _classNames[bsPrefix + \"-bar-striped\"] = animated || striped, _classNames)),\n    style: _extends({\n      width: getPercentage(now, min, max) + \"%\"\n    }, style),\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max\n  }), srOnly ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, label) : label);\n}\n\nvar ProgressBar = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var isChild = _ref2.isChild,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"isChild\"]);\n\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n\n  var min = props.min,\n      now = props.now,\n      max = props.max,\n      label = props.label,\n      srOnly = props.srOnly,\n      striped = props.striped,\n      animated = props.animated,\n      bsPrefix = props.bsPrefix,\n      variant = props.variant,\n      className = props.className,\n      children = props.children,\n      wrapperProps = _objectWithoutPropertiesLoose(props, [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"animated\", \"bsPrefix\", \"variant\", \"className\", \"children\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, wrapperProps, {\n    className: classNames(className, bsPrefix)\n  }), children ? map(children, function (child) {\n    return /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    });\n  }) : renderProgressBar({\n    min: min,\n    now: now,\n    max: max,\n    label: label,\n    srOnly: srOnly,\n    striped: striped,\n    animated: animated,\n    bsPrefix: bsPrefix,\n    variant: variant\n  }, ref));\n});\nProgressBar.displayName = 'ProgressBar';\nProgressBar.defaultProps = defaultProps;\nexport default ProgressBar;","import React from 'react';\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid elements\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n */\n\nfunction map(children, func) {\n  var index = 0;\n  return React.Children.map(children, function (child) {\n    return /*#__PURE__*/React.isValidElement(child) ? func(child, index++) : child;\n  });\n}\n/**\n * Iterates through children that are \"valid elements\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n */\n\n\nfunction forEach(children, func) {\n  var index = 0;\n  React.Children.forEach(children, function (child) {\n    if ( /*#__PURE__*/React.isValidElement(child)) func(child, index++);\n  });\n}\n\nexport { map, forEach };"],"names":["props","label","variant","value","type","size","finalValue","Math","floor","random","textColor","bgColorClass","className","ProgressBar","now","min","max","Container","Row","Col","Documentation","title","description","scope","Progress","imports","example","getPercentage","percentage","round","renderProgressBar","_ref","ref","_classNames","srOnly","striped","animated","style","bsPrefix","_objectWithoutPropertiesLoose","React","_extends","role","classNames","width","_ref2","isChild","useBootstrapPrefix","children","wrapperProps","func","index","child","map","cloneElement","displayName","defaultProps"],"sourceRoot":""}